type Mutation {
  """
  update task
  """
  updateTaskMutation(input: update_taskInput!): update_taskPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  """
  Find a task by ID
  """
  task(id: ID!): Task

  """
  Find all tasks
  """
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TaskConnection
}

type Task {
  description: String!
  id: ID!
  title: String!
}

"""
The connection type for Task.
"""
type TaskConnection {
  """
  A list of edges.
  """
  edges: [TaskEdge]

  """
  A list of nodes.
  """
  nodes: [Task]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TaskEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Task
}

"""
Autogenerated input type of update_task
"""
input update_taskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String!
  id: Int!
  title: String!
}

"""
Autogenerated return type of update_task
"""
type update_taskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  task: Task
}